// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_replication.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log_replication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace replication {

namespace {

const ::google::protobuf::Descriptor* Replication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Replication_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_5freplication_2eproto() {
  protobuf_AddDesc_log_5freplication_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log_replication.proto");
  GOOGLE_CHECK(file != NULL);
  Replication_descriptor_ = file->message_type(0);
  static const int Replication_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replication, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replication, fileoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replication, data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replication, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replication, log_data_),
  };
  Replication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Replication_descriptor_,
      Replication::default_instance_,
      Replication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Replication));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_5freplication_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Replication_descriptor_, &Replication::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_5freplication_2eproto() {
  delete Replication::default_instance_;
  delete Replication_reflection_;
}

void protobuf_AddDesc_log_5freplication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025log_replication.proto\022\013replication\"h\n\013"
    "Replication\022\016\n\006fileID\030\001 \002(\005\022\022\n\nfileoffse"
    "t\030\002 \002(\003\022\021\n\tdata_size\030\003 \002(\003\022\020\n\010checksum\030\004"
    " \002(\003\022\020\n\010log_data\030\005 \002(\014", 142);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log_replication.proto", &protobuf_RegisterTypes);
  Replication::default_instance_ = new Replication();
  Replication::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_5freplication_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_5freplication_2eproto {
  StaticDescriptorInitializer_log_5freplication_2eproto() {
    protobuf_AddDesc_log_5freplication_2eproto();
  }
} static_descriptor_initializer_log_5freplication_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Replication::kFileIDFieldNumber;
const int Replication::kFileoffsetFieldNumber;
const int Replication::kDataSizeFieldNumber;
const int Replication::kChecksumFieldNumber;
const int Replication::kLogDataFieldNumber;
#endif  // !_MSC_VER

Replication::Replication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Replication::InitAsDefaultInstance() {
}

Replication::Replication(const Replication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Replication::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0;
  fileoffset_ = GOOGLE_LONGLONG(0);
  data_size_ = GOOGLE_LONGLONG(0);
  checksum_ = GOOGLE_LONGLONG(0);
  log_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Replication::~Replication() {
  SharedDtor();
}

void Replication::SharedDtor() {
  if (log_data_ != &::google::protobuf::internal::kEmptyString) {
    delete log_data_;
  }
  if (this != default_instance_) {
  }
}

void Replication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Replication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Replication_descriptor_;
}

const Replication& Replication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5freplication_2eproto();
  return *default_instance_;
}

Replication* Replication::default_instance_ = NULL;

Replication* Replication::New() const {
  return new Replication;
}

void Replication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0;
    fileoffset_ = GOOGLE_LONGLONG(0);
    data_size_ = GOOGLE_LONGLONG(0);
    checksum_ = GOOGLE_LONGLONG(0);
    if (has_log_data()) {
      if (log_data_ != &::google::protobuf::internal::kEmptyString) {
        log_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Replication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fileID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fileoffset;
        break;
      }

      // required int64 fileoffset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileoffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fileoffset_)));
          set_has_fileoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_size;
        break;
      }

      // required int64 data_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_size_)));
          set_has_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_checksum;
        break;
      }

      // required int64 checksum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_log_data;
        break;
      }

      // required bytes log_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_log_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Replication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fileID = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fileid(), output);
  }

  // required int64 fileoffset = 2;
  if (has_fileoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fileoffset(), output);
  }

  // required int64 data_size = 3;
  if (has_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->data_size(), output);
  }

  // required int64 checksum = 4;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->checksum(), output);
  }

  // required bytes log_data = 5;
  if (has_log_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->log_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Replication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fileID = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fileid(), target);
  }

  // required int64 fileoffset = 2;
  if (has_fileoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fileoffset(), target);
  }

  // required int64 data_size = 3;
  if (has_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->data_size(), target);
  }

  // required int64 checksum = 4;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->checksum(), target);
  }

  // required bytes log_data = 5;
  if (has_log_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->log_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Replication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fileID = 1;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fileid());
    }

    // required int64 fileoffset = 2;
    if (has_fileoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fileoffset());
    }

    // required int64 data_size = 3;
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_size());
    }

    // required int64 checksum = 4;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->checksum());
    }

    // required bytes log_data = 5;
    if (has_log_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->log_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Replication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Replication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Replication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Replication::MergeFrom(const Replication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_fileoffset()) {
      set_fileoffset(from.fileoffset());
    }
    if (from.has_data_size()) {
      set_data_size(from.data_size());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
    if (from.has_log_data()) {
      set_log_data(from.log_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Replication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Replication::CopyFrom(const Replication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replication::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Replication::Swap(Replication* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(fileoffset_, other->fileoffset_);
    std::swap(data_size_, other->data_size_);
    std::swap(checksum_, other->checksum_);
    std::swap(log_data_, other->log_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Replication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Replication_descriptor_;
  metadata.reflection = Replication_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace replication

// @@protoc_insertion_point(global_scope)
