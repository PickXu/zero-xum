#
#     Shore-kits -- Benchmark implementations for Shore-MT
#   
#                       Copyright (c) 2007-2009
#      Data Intensive Applications and Systems Labaratory (DIAS)
#               Ecole Polytechnique Federale de Lausanne
#   
#                         All Rights Reserved.
#   
#   Permission to use, copy, modify and distribute this software and
#   its documentation is hereby granted, provided that both the
#   copyright notice and this permission notice appear in all copies of
#   the software, derivative works or modified versions, and any
#   portions thereof, and that both notices appear in supporting
#   documentation.
#   
#   This code is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. THE AUTHORS
#   DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER
#   RESULTING FROM THE USE OF THIS SOFTWARE.
#

checkpoint-freq = 10
shore-log_page_flushes = no

#
# @file:  shore.conf
#
# @brief: Shore-kits configuration file
#                                                                          
# There are three implemented benchmarks and two under construction. 
# Implmented: TPC-C, TPC-B, and TM-1 (aka Nokia Network Database Benchmark)
# Under construction: TPC-H, and TPC-E
#
# A scaling factor of one (1) translates to
#
# TPC-C: 1 wh (130MB)
# TPC-B: 1 branch (20 MB)
# TM1:   10000 subscribers (15MB)
#
# TPC-H: 1 wh (2.2 GB)
# TPC-E: 1 sf (6.5 GB)
#

############################################################################
#                                                                          #
# Clobber device                                                           #
#                                                                          #
# Clobber the existing device file (if any) and populate a new             #
# database (1=yes,0=no).                                                   #
#                                                                          #
# Notes:                                                                   #
# - Log recovery happens before Shore checks this option, so delete        #
#   the log for a completely fresh start.                                  #
# - For disk-based data and a large buffer pool, it is *significantly*     #
#   faster to load a new database than warm up an existing one.            #
#                                                                          #
############################################################################

#db-clobberdev = 1    ### It will populate a new database
db-clobberdev = 1     ### It will open an existing database






############################################################################
#                                                                          #
# Enable Physical Hacks                                                    #
#                                                                          #
# Some workloads get higher performance if some hacking is done in their   #
# physical layout. For example, TPC-B's performance increases a lot if     #
# the Branches and Tellers records are padded so that only one record      #
# resides at each heap page. This flag enables those hacks. They can also  #
# be enabled by the command line with the -x option.                       #
#                                                                          #
############################################################################

physical-hacks-enable = 0
#physical-hacks-enable = 1




############################################################################
#                                                                          #
# Fake I/O delay                                                           #
#                                                                          #
# Impose an artificial delay whenever there is an I/O operation. This      #
# mechanism allows to decouple the I/O subsystem performance from the      #
# measurements by storing the database on an in-memory file system. The    #
# artificial delay simulates a high-end I/O subsystem, such that all I/O   #
# requests can proceed in parallel but must each still pay the cost of an  #
# I/O. This is asomewhat pessimistic because it assumes every   #
# access requires the same latency. But, it ensures that all aspects of    #
# the storage manager are exercised.                                       #
#                                                                          #
# shore-fakeiodelay-enable: Enable/Disable the fake I/O delay mechanism    #
# shore-fakeiodelay       : The imposed delay, in usec                     #
#                                                                          #
############################################################################

##### Enable/Disable fake I/O delay (0/1);
#shore-fakeiodelay-enable = 0
shore-fakeiodelay-enable = 1

##### The imposed delay (in usec) #####
#shore-fakeiodelay = 5
shore-fakeiodelay = 0



############################################################################
#                                                                          #
# Logging                                                                  #
#                                                                          #
############################################################################

##### Misc #####
shore-errlog = info # one of {none emerg fatal alert internal error warning info debug}


############################################################################
#                                                                          #
# Number of page cleaners                                                  #
#                                                                          #
# Number of asynchronous page cleaners to use.                             #
# Generally one per physical disk is good.                                 #
#                                                                          #
############################################################################

#shore-pagecleaners = 8
# shore-pagecleaners = 4
shore-pagecleaners = 1



############################################################################
#                                                                          #
# Loading parameters                                                       #
#                                                                          #
# db-loaders:                                                              #
# Number of loader threads. More gives higher parallelism but deadlocks    #
# are more likely as well. 10-20 usually gives the shortest overall load   #
# time.                                                                    # 
#                                                                          #
# db-record-preloads:                                                      #
# Number of (single-threaded) preloads per worker to do before firing up   #
# the threads. Buffers loader threads so they deadlock less, but at the    #
# cost of increased serial execution (reduced parallelism).                #
#                                                                          #
############################################################################

##### Number of loader threads #####
#db-loaders = 8
#db-loaders = 30
#db-loaders = 20
db-loaders = 1
#db-loaders = 4
#db-loaders = 2
#db-loaders = 1

##### Number of preloads per worker #####
db-record-preloads = 1000
#db-record-preloads = 1



############################################################################
#                                                                          #
# Worker parameters                                                        #
#                                                                          #
############################################################################

##### Number of worker threads #####
#db-workers = 2
#db-workers = 10
#db-workers = 16
#db-workers = 20
db-workers = 1
#db-workers = 70
#db-workers = 84
#db-workers = 100


##### srmw-queue spin #####
db-worker-queueloops = 1
#db-worker-queueloops = 2000
#db-worker-queueloops = 10000

###### worker queue batch sz #####
# look also client batch sz
db-worker-inp-queue-sz = 15
db-worker-com-queue-sz = 0




############################################################################
#                                                                          #
# Client parameters                                                        #
#                                                                          #
############################################################################

##### Think time  #####
# note: it should be combined with batchsz=1
db-cl-thinktime = 0

##### Client batch sz #####
#db-cl-batchsz = 1
db-cl-batchsz = 30



############################################################################
#                                                                          #
# StagedFlusher parameters (staged group commit)                           #
#                                                                          #
############################################################################

##### Number of flushers #####
num-flushers = 4

##### Group size threshold #####
flusher-group-size = 100

##### Log size threshold #####
flusher-log-size = 200000

##### Time interval threshold (in usec) #####
flusher-timeout = 10000

##### Flusher binding policy - 0=NoBinding,1=Adjacent,2=SpreadToCores
flusher-binding = 0



############################################################################
#                                                                          #
# Platform-specific parameters                                             #
#                                                                          #
############################################################################


##### The default partitioning factor for Baseline MRBTrees  #####

# pulling this number out of thin air
mrbt-partitions = 10


##### CPU Counts  #####

# hard-limit (machine dependent)
sys-maxcpucount = 64
# soft-limit
sys-activecpucount = 64



############################################################################
#                                                                          #
# Default values for the (measure) and (test) commands                     #
#                                                                          #
############################################################################

# MEASURE
measure-num-queried = 32    # no of whs queried
measure-spread      = 1     # 0=No,1=Yes
measure-num-threads = 32
measure-duration    = 30    # duration of each iteration (in secs.)
measure-trx-id      = 102   # 2=Base-Pay
measure-iterations  = 2
measure-sli         = 0
measure-cl-binding  = 0     # client binding policy - 0=NoBinding,1=Adjacent,2=SpreadToCores

# TEST
# WARNING: the test command is innacurate. Use MEASURE instead
test-num-queried = 32       # no of whs queried
test-spread      = 1        # 0=No,1=Yes
test-num-threads = 32
test-num-trxs    = 10       # no of trxs per thread
test-trx-id      = 111      # e.g. 2=Base-Pay
test-iterations  = 2 
test-sli         = 0        # 0=No,1=Yes
test-cl-binding  = 0        # client binding policy - 0=NoBinding,1=Adjacent,2=SpreadToCores



################################################
#                                              #
# Default benchmark values                     #
#                                              #
################################################

# Used in the benchmarks for the Secondary indexes
records-to-access = 1
#records-to-access = 10
#records-to-access = 100
#records-to-access = 1000
#records-to-access = 10000
#records-to-access = 100000
