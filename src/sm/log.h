/*
 * (c) Copyright 2011-2013, Hewlett-Packard Development Company, LP
 */

/* -*- mode:C++; c-basic-offset:4 -*-
     Shore-MT -- Multi-threaded port of the SHORE storage manager

                       Copyright (c) 2007-2009
      Data Intensive Applications and Systems Labaratory (DIAS)
               Ecole Polytechnique Federale de Lausanne

                         All Rights Reserved.

   Permission to use, copy, modify and distribute this software and
   its documentation is hereby granted, provided that both the
   copyright notice and this permission notice appear in all copies of
   the software, derivative works or modified versions, and any
   portions thereof, and that both notices appear in supporting
   documentation.

   This code is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. THE AUTHORS
   DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER
   RESULTING FROM THE USE OF THIS SOFTWARE.
*/

/*<std-header orig-src='shore' incl-file-exclusion='LOG_H'>

 $Id: log.h,v 1.86 2010/08/03 14:24:46 nhall Exp $

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

*/

#ifndef LOG_H
#define LOG_H

#include "w_defines.h"

/*  -- do not edit anything above this line --   </std-header>*/

#undef ACQUIRE

class logrec_t;
class log_buf;
class lpid_t;
class generic_page;
class fixable_page_h;
class PoorMansOldestLsnTracker;

/**
 * \defgroup SSMLOG Logging And Recovery
 * \ingroup SSMXCT
 * \brief Classes for Transactional Logging and Recovery.
 * \details
 * Updates performed by transactions are logged so that
 * the can be rolled back (in the event of a transaction abort)
 * or restored (in the event of a crash).  Both the old and new values
 * of an updated location are logged.  This allows a steal, no-force
 * buffer management policy, which means the buffer manager is free
 * to write dirty pages to disk at any time and yet does not have
 * to write dirty pages for a a transaction to commit.
 *
 * The log is stored in a set of Unix files, all in the same directory,
 * whose path is determined by a run-time option.
 * The maximum size of the log is also determined by a run-time option.
 * The proper value of the log size depends on
 * the expected transaction mix.  More specifically, it depends on the
 * age of the oldest (longest running) transaction in the system and
 * the amount of log space used by all active transactions. Here are
 * some general rules to determine the  amount  of  free  log  space
 * available in the system.
 * \li Log records between the first log
 *   record generated by the oldest active transaction and the most
 *   recent log record generated by any transaction cannot be thrown
 *   away.
 * \li Log records from a transaction are no longer needed
 *   once the transaction has committed or completely aborted and all
 *   updates have made it to disk. Aborting a transaction causes log space
 *   to be used, so space is reserved for aborting each transaction.
 *   Enough log space must be available to commit or abort all active
 *   transactions at all times.
 *
 * \li Only space starting at the beginning of the log can be reused.
 *   This space can be reused if it contains log records only for
 *   transactions meeting the previous rule.
 *
 * \li All storage manager calls that update records require log space twice
 *    the size of the space updated in the record. All calls that create,
 *    append, or truncate records require log space equal to the size
 *    created, inserted, or deleted. Log records generated by these calls
 *    (generally one per call) have an overhead of approximately 50 bytes.
 *
 * \li The amount of log space reserved for aborting a transaction is equal to
 *   the amount of log space generated by the transaction plus a fudge
 *   factor.
 *   (Where btrees are concerned, a structure modification
 *   might be necessary on abort, using more space on abort, or might not be
 *   necessary on abort where it was done during forward processing,
 *   using less space on abort.)
 *
 * \li The transaction assumes responsiblity for reserving space in the
 *   log so that it can abort, should it need to (without leaving an
 *   unrecoverable volume).  The transaction and the log cooperate to
 *   reserve space for the transaction's aborting.
 *
 * \li When insufficient log space is available for a transaction, the
 *   transaction is (may be, depending on the server) aborted.
 *   The storage manager will return an error indication (out of log space)
 *   if it is unable to insert a log record into the log due to
 *   insufficient space.
 *
 * Checkpoints are taken periodically by the storage manager in order to
 * free log space and shorten recovery time.  Checkpoints are "fuzzy"
 * and can do not require the system to pause while they are completing.
 *
 * See the storage manager constructor ss_m::ss_m for more information
 * about handling out-of-logspace conditions.
 */


/*<std-footer incl-file-exclusion='LOG_H'>  -- do not edit anything below this line -- */

#endif          /*</std-footer>*/
